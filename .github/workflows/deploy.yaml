name: Deploy FastAPI App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "REPLIERS_API_TOKEN=${{ secrets.REPLIERS_API_TOKEN }}" >> .env
          echo "CACHE_REDIS_HOST=redis://cache" >> .env
          echo "TIME_DELAY=15" >> .env
          echo "USE_CACHE=True" >> .env
          echo "RETRIES=5" >> .env

      - name: Set up SSH
        run: |
          if ! command -v ssh &> /dev/null; then
              echo "SSH не установлен. Установка..."
              sudo apt-get update -y
              sudo apt-get install -y openssh-client
          fi

          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "Проверка доступа к серверу..."
          if ssh -o BatchMode=yes -o ConnectTimeout=5 ${{ secrets.SERVER_IP }} exit; then
              echo "Доступ к серверу установлен."
          else
              echo "Ошибка доступа к серверу. Проверьте IP-адрес и ключи." >&2
              exit 1
          fi

          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy files to server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          TARGET_DIR: /home/${{ secrets.SERVER_USER }}/RepliersParser
        run: |
          for file in .env api.py replier_parser.py Dockerfile docker-compose.yml requirements.txt; do
              if ! scp -P "$SERVER_PORT" -o StrictHostKeyChecking=no "$file" "$SERVER_USER@$SERVER_IP:$TARGET_DIR"; then
                  echo "Ошибка при копировании файла: $file" >&2
                  exit 1
              fi
          done

      - name: Restart Docker containers
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }} 
        run: |
          if ! ssh -p "$SERVER_PORT" -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" << 'ENDSSH'
          cd "$TARGET_DIR"
          docker-compose down
          docker-compose up -d --build
          ENDSSH
          then
              echo "Ошибка при перезапуске контейнеров." >&2
              exit 1
          fi
